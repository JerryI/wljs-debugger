utilsAddListeners = Null;
utilsReset = Null;
utilsTransition = Null;
utilsAddBreak = Null;
utilsRemoveBreak = Null;

Head        := ImportComponent["Components/Head.wlx"];

Alert           = ImportComponent["Components/Alert.wlx"];
Modals           = ImportComponent["Components/Modals/Modals.wlx"];

ExtensionsJS = (StringJoin["/", FileNameToURLPath[#]]) &/@ WLJS`PM`Includes["js"];

settings = <||>;

destroy[state_, ___] := With[{
    cli = state["Client"],
    kernel = state["Kernel"],
    events = {
        state["LogWindow"], 
        state["ClonedMessanger"], 
        state["ClonedOrigin"], 
        state["ClonedClient"], 
        state["AsyncStateChannel"],
        state["Controls"],
        state["Assert"]
    }
},
    Echo["Debugger >> Destroy"];

    utilsRemoveBreak[kernel, "Assert"];
    utilsRemoveBreak[kernel, {"Symbol", #}] &/@ (state["Symbols"]);
            
    utilsReset[kernel];

    WebUIClose[cli];

    EventRemove /@ events;
    ClearAll[state];
]


setThingsUp[state_] := With[{
    kernel = state["Kernel"],
    messanger = state["Messanger"],
    origin = state["Origin"],
    logWindow = state["LogWindow"],
    cli = state["Client"],
    controls = state["Controls"],
    notebook = state["Notebook"]
}, Module[{
    
},

    state["ClonedMessanger"] = messanger // EventClone;
    state["ClonedOrigin"] = origin // EventClone;
    state["ClonedClient"] = cli // EventClone;

    state["Interruption"] = CreateUUID[];
    state["Symbols"] = {};
    state["BreakOnSymbols"] = False;

    EventHandler[state["ClonedOrigin"], {"Closed"->Function[Null,
        Echo["Debugger >> Origin was closed!"];
        destroy[state];
    ]}];

    EventHandler[state["ClonedClient"], {"Closed"->Function[Null,
        Echo["Debugger >> Client window was closed!"];
        destroy[state];
    ]}];    

    (*/* monitor WSLink */*)
    EventHandler[state["ClonedMessanger"], {        
        "WebSocket:Kernel:Lost" -> Function[Null,
            Echo["Debugger >> WSLink lost"];
            destroy[state];
        ]    
    }];

    With[{stream = utilsAddListeners[kernel]},
        state["AsyncStateChannel"] = stream["AsyncStateChannel"];
        state["AsyncStreamer"] = stream["AsyncStreamer"];
    ];

    EventHandler[state["Interruption"], {
        "Assert" -> Function[payload,
            If[Length[Select[notebook["Cells"], (#["State"] =!= "Idle") &]] == 0,
                Block[{Global`$Client = origin(*`*)}, EventFire[messanger, "Warning", "No running cells found"] ];
                Return[];
            ];

            utilsTransition[kernel -> "Inspect" ];
            EventFire[logWindow, "Assert", <|"Client"->cli, "Message"->payload|>];
        ],

        any_String -> Function[value,
            If[Length[Select[notebook["Cells"], (#["State"] =!= "Idle") &]] == 0,
                Block[{Global`$Client = origin(*`*)}, EventFire[messanger, "Warning", "No running cells found"] ];
                Return[];
            ];

            utilsTransition[kernel -> "Inspect" ];
            EventFire[logWindow, "Symbol", <|"Client"->cli, "Message"->value, "Name"->any|>];
        ]
    }];

    EventHandler[state["AsyncStateChannel"], {
        "State" -> Function[st,
            EventFire[logWindow, "State", <|"Client"->cli, "Message"->st|>]
        ]
    }];

    utilsTransition[notebook["Evaluator"]["Kernel"]];

    EventHandler[controls, {

        "Abort" -> Function[Null,
            If[Length[Select[notebook["Cells"], (#["State"] =!= "Idle") &]] == 0,
                Block[{Global`$Client = origin(*`*)}, EventFire[messanger, "Warning", "No running cells found"] ];
                Return[];
            ];

            Then[utilsTransition[kernel -> "Aborted" ], Function[Null, 

                Map[Function[cell,
                    cell["State"] = "Idle";
                    Block[{Global`$Client = origin(*`*)}, EventFire[cell, "State", "Idle"]];
                ], Select[notebook["Cells"], (#["State"] =!= "Idle") &]];

            ], Function[messsage,
                Block[{Global`$Client = origin(*`*)}, EventFire[messanger, "Warning", messsage] ]
            ]];
        ],

        "Inspect" -> Function[Null,
            If[Length[Select[notebook["Cells"], (#["State"] =!= "Idle") &]] == 0,
                Block[{Global`$Client = origin(*`*)}, EventFire[messanger, "Warning", "No running cells found"] ];
                Return[];
            ];

            Then[utilsTransition[kernel -> "Inspect" ], Function[Null, Null], Function[messsage,
                Block[{Global`$Client = origin(*`*)}, EventFire[messanger, "Warning", messsage] ]
            ]];
        ],

        "Show" -> Function[Null,
            If[Length[Select[notebook["Cells"], (#["State"] =!= "Idle") &]] == 0,
                Block[{Global`$Client = origin(*`*)}, EventFire[messanger, "Warning", "No running cells found"] ];
                Return[];
            ];

            Then[utilsTransition[kernel -> "Show" ], Function[msg, 
                EventFire[logWindow, "Message", <|"Client"->cli, "Message"->msg|>]
            ], Function[messsage,
                Block[{Global`$Client = origin(*`*)}, EventFire[messanger, "Warning", messsage] ]
            ]];
        ],        
        
        "Trace" -> Function[Null,
            If[Length[Select[notebook["Cells"], (#["State"] =!= "Idle") &]] == 0,
                Block[{Global`$Client = origin(*`*)}, EventFire[messanger, "Warning", "No running cells found"] ];
                Return[];
            ];

            Then[utilsTransition[kernel -> "Show" ], Function[stream, 
                EventHandler[stream, Function[msg,
                    EventFire[logWindow, "Message", <|"Client"->cli, "Message"->msg|>]
                ]];
            ], Function[messsage,
                Block[{Global`$Client = origin(*`*)}, EventFire[messanger, "Warning", messsage] ]
            ]];
        ],

        "Continue" -> Function[Null,
            Then[utilsTransition[kernel -> "Normal" ], Function[Null, Null], Function[messsage,
                Block[{Global`$Client = origin(*`*)}, EventFire[messanger, "Warning", messsage] ]
            ]];
        ],

        "OnAssert" -> Function[val,
            If[val === "true", 
                utilsAddBreak[kernel, {"Assert", state["Interruption"]}];
            ,
                utilsRemoveBreak[kernel, "Assert"];
            ];
        ],

        "OnSymbols" -> Function[val,
            state["BreakOnSymbols"] = val;
        ],

        "AddSymbol" -> Function[symbol,
            state["Symbols"] = Append[state["Symbols"], symbol];
            utilsAddBreak[kernel, {"Symbol", symbol, state["Interruption"]}];
        ],
        
        "RemoveSymbol" -> Function[symbol,
            state["Symbols"] = state["Symbols"] /. {symbol -> Nothing};
            utilsRemoveBreak[kernel, {"Symbol", symbol}];
        ]
    }];

] ]

App[request_] := Module[{

}, With[{
    state = BinaryDeserialize @ BaseDecode @ URLDecode @ StringDrop[request["Path"], 
        Switch[$OperatingSystem,
            "Windows", 
            StringLength["/debugger/"], 
            "Linux",
            StringLength["/debugger/"],
            _,  
            StringLength["/debugger/"] 
        ]
    ]
},
    With[{
        notebook = state["Notebook"],
        origin = state["Origin"],
        secret = CreateUUID[],
        controls = CreateUUID[],
        GlobalMessanger = state["Messanger"],
        logWindow = CreateUUID[]
    },

        EventHandler[secret, {
            "Load" -> Function[Null, With[{cli = Global`$Client(*`*)},

                state["ValidQ"] = True;
                state["Client"] = cli;
                state["Controls"] = controls;
                state["Secret"] = secret;
                state["LogWindow"] = logWindow;

                setThingsUp[state];
            ]]
        }];

        <html class="h-full"> 
            <Head Title={"Debugger"} Settings={settings}>
                <meta charset="utf-8"/>
                <WLJSHeader List={ExtensionsJS}/>  
                <WLJSTransportScript TwoKernels={False} Port={$Env["ws"]}/>     
                <WebUIInitializationScript/>
            </Head>  
            <body class="h-full dark:linux:bg-gray-700 dark:owin:bg-gray-700 owin:border owin:border-gray-500 owin:bg-blue-100/20"> 
            <div class="h-full">
              <Alert/>
              <div id="frame" class="h-full">
                <div class="h-full flex flex-col h-full">          
                  <main class="grow flex flex-col overflow-hidden h-full">
                    <div class="h-full divide-y divide-gray-200 bg-white dark:bg-gray-800 flex flex-col overflow-hidden h-full bg-transparent dark:divide-gray-600">
                      <div class="px-4 py-2 text-center text-sm font-semibold dark:text-gray-400 linux:hidden win:h-titlebar owin:h-titlebar" style="-webkit-app-region: drag">
                        Debugger
                      </div>
                      <div class="flex flex-col gap-y-2 h-full">

                        <div class="flex shadow-sm border border-gray-200 dark:border-gray-700 " role="group">
                          <button id="continue" type="button" class="inline-flex items-center px-3 py-1 text-sm font-medium text-gray-900 hover:bg-gray-100 hover:text-blue-700 dark:text-white dark:hover:text-white dark:hover:bg-gray-700">
                            <svg class="w-5 h-5 mr-1" viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg" fill="currentColor"><path fill-rule="evenodd" clip-rule="evenodd" d="M4 2H3V14H4V2ZM7.29062 2.59314L6.5 3.00001V13L7.29062 13.4069L14.2906 8.40687V7.59314L7.29062 2.59314ZM13.1398 8.00001L7.5 12.0284V3.9716L13.1398 8.00001Z"/></svg>
                            Continue
                          </button>

                          <button id="inspect" type="button" class="inline-flex items-center px-3 py-1 text-sm font-medium text-gray-900 hover:bg-gray-100 hover:text-blue-700 dark:text-white dark:hover:text-white dark:hover:bg-gray-700">

                              <svg class="w-4 h-4 mr-2" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                          <path fill="none" stroke="currentColor" stroke-width="2" d="M5.5,21 C7.98528137,21 10,18.9852814 10,16.5 C10,14.0147186 7.98528137,12 5.5,12 C3.01471863,12 1,14.0147186 1,16.5 C1,18.9852814 3.01471863,21 5.5,21 Z M1,16 L1,7 L1,6.5 C1,4.01471863 3.01471863,2 5.5,2 L6,2 M23,16 L23,7 L23,6.5 C23,4.01471863 20.9852814,2 18.5,2 L18,2 M18.5,21 C20.9852814,21 23,18.9852814 23,16.5 C23,14.0147186 20.9852814,12 18.5,12 C16.0147186,12 14,14.0147186 14,16.5 C14,18.9852814 16.0147186,21 18.5,21 Z M10,17 C10,17 10,15 12,15 C14,15 14,17 14,17"/>
                        </svg>

                            Inspect
                          </button>  

                          <button id="abort" type="button" class="inline-flex items-center px-3 py-1 text-sm font-medium text-gray-900 hover:bg-gray-100 hover:text-blue-700 dark:text-white dark:hover:text-white dark:hover:bg-gray-700">
                          <svg class="h-4 w-4 mr-2 text-red-400" viewBox="0 0 48 48" fill="none"><path d="M27 14H42C43.1046 14 44 14.8954 44 16V30C44 31.1046 43.1046 32 42 32H38" stroke="currentColor" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"></path><path d="M11 14H6C4.89543 14 4 14.8954 4 16V30C4 31.1046 4.89543 32 6 32H21" stroke="currentColor" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"></path><path d="M14 5.99998L34 40" stroke="currentColor" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"></path><path d="M32 23H36" stroke="currentColor" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"></path><path d="M12 23H16" stroke="currentColor" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"></path></svg>
                            Abort
                            </button> 

                            <button id="break" type="button" class="ml-auto inline-flex items-center px-3 py-1 text-sm font-medium text-gray-900 hover:bg-gray-100 hover:text-blue-700 dark:text-white dark:hover:text-white dark:hover:bg-gray-700">
                          
                            <span>Break</span>
                            <svg class="-mr-1 w-5" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true" data-slot="icon">
                                <path fill-rule="evenodd" d="M5.22 8.22a.75.75 0 0 1 1.06 0L10 11.94l3.72-3.72a.75.75 0 1 1 1.06 1.06l-4.25 4.25a.75.75 0 0 1-1.06 0L5.22 9.28a.75.75 0 0 1 0-1.06Z" clip-rule="evenodd" />
                            </svg>
                            </button>

                        <div class="inline-flex items-center px-3 py-1 text-sm text-gray-900 dark:text-white dark:hover:text-white dark:hover:bg-gray-700 dark:focus:ring-blue-500 dark:focus:text-white">
                          <span class="rounded bg-white text-gray-400" id="state">Undefined</span>
                        </div>
                        </div>

                          <div class="overflow-hidden hidden bg-white border border-gray-200 dark:border-gray-700 h-full">
	                        <div class="px-2 py-2 overflow-y-scroll text-sm h-full" id="container">
	                            
	                        </div>
                          </div>

                        </div>                      
                    </div>   

                    <div id="break-float" 
                         class="absolute right-0 z-inf mt-6 origin-top-right divide-y divide-gray-100 rounded backdrop-blur-xl bg-white/90 outline outline-gray-300 outline-offset-0 outline-1 text-gray-800 hidden" 
                         style="width:20rem" 
                         role="menu" 
                         tabindex="-1">
                        <div class="px-2 py-2">                          
                        <div class="relative flex items-start sm-controls"><div class="flex h-6 items-center"><input id="break-assert" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600"/></div><div class="ml-3 text-sm leading-6"><label class="font-medium text-gray-900">Assert</label><p class="text-gray-500">Listen to any Assert[False] calls</p></div></div> 
                        <div class="relative flex items-start sm-controls"><div class="flex h-6 items-center"><input id="break-symbol" type="checkbox" class="h-4 w-4 rounded border-gray-300 text-indigo-600 focus:ring-indigo-600"/></div><div class="ml-3 text-sm leading-6"><label class="font-medium text-gray-900">Symbols</label><p class="text-gray-500">Break on any symbols assigments</p></div></div> 
                        </div>
                    </div>

                    <WebUIOnLoad Event={secret} Pattern={"Load"}/>
                    <WebUIEventListener Id={"continue"} Event={controls} Pattern={"Continue"} />
                    <WebUIEventListener Id={"inspect"} Event={controls} Pattern={"Inspect"} />
                    <WebUIEventListener Id={"abort"} Event={controls} Pattern={"Abort"} />
                    <WebUIEventListener Id={"break-assert"} Type={"change"} Property={"checked"} Event={controls} Pattern={"OnAssert"} />
                    <WebUIEventListener Id={"break-symbol"} Type={"change"} Property={"checked"} Event={controls} Pattern={"OnSymbols"} />

                    <WebUIJSBind Event={logWindow}>
                    	const container = document.getElementById('container');
                        const parent = container.parentNode;
                        const state = document.getElementById('state');

                        const bbreak = document.getElementById('break');
                        const breakDropdown = document.getElementById("break-float");

                        const inspect = document.getElementById('inspect');
                        const abort = document.getElementById('abort');
                        const ccontinue = document.getElementById('continue');

                        let prev;
                        let cancel;

                        let shown = false;

                        let closeDropdown;

                        closeDropdown = (ev) => {
                            console.log(ev.target);
                            if (!breakDropdown.contains( ev.target ) && !bbreak.contains( ev.target )) {
                                window.removeEventListener('click', closeDropdown);
                                breakDropdown.classList.add('hidden');
                            }

                            ev.stopPropagation();
                        };

                        bbreak.addEventListener('click', () => {
                            const rect = bbreak.getBoundingClientRect();
                            //const p = breakDropdown.getBoundingClientRect();
                            breakDropdown.style.top = rect.top + 10;
                            breakDropdown.style.left = `calc(${rect.left + rect.width}px - 20rem)`;
                            breakDropdown.classList.remove('hidden');
                            window.addEventListener('click', closeDropdown);
                        });

                    	//binding to event patterns
                    	this.on('State', async (data) => {
                    		const assoc = await interpretate(data, {hold:true});
                    		const text = await interpretate(assoc.Message, {});
                            if (text != 'Normal') {
                                state.classList.add('font-medium', 'text-teal-500')
                            } else {
                                state.classList.remove('font-medium', 'text-teal-500')
                            }
                    		state.innerText = text;

                            if (prev) {
                                prev.classList.remove(...('bg-gray-100 dark:bg-gray-700 dark:text-white'.split(' ')));
                                prev.firstChild.classList.remove('text-teal-500');
                                prev = false;
                            } 
                            
                            if (cancel) {
                                cancel();
                                cancel = false;
                            }

                            switch(text) {
                                case 'Inspect':
                                    inspect.classList.add(...('bg-gray-100 dark:bg-gray-700 dark:text-white'.split(' ')));
                                    inspect.firstChild.classList.add('text-teal-500');
                                    prev = inspect;
                                break;

                                case 'In transition':
                                    abort.style.color = "#8080808f";
                                    inspect.style.color = "#8080808f";
                                    ccontinue.style.color = "#8080808f";
                                    bbreak.style.color = "#8080808f";
                                    cancel = () => {
                                        abort.style.color = "";
                                        inspect.style.color = "";
                                        ccontinue.style.color = "";  
                                        bbreak.style.color = "";                                   
                                    }
                                break;
                            }
                    	});

                        this.on('Message', async (data) => {
                    		const assoc = await interpretate(data, {hold:true});
                    		const text = await interpretate(assoc.Message, {});
                            if (!shown) {
                                shown = true;
                                parent.classList.remove('hidden');
                            }

                            if (Array.isArray(text)) {
                                const buffer = [];
                                text.forEach((t) => {
                                    const  p = document.createElement('p');
                                    p.innerText = t;                                    
                                    buffer.push(p);
                                });
                                container.appendChild(...buffer);
                            } else {
                                const  p = document.createElement('p');
                                p.innerText = text;
                                container.appendChild(p);
                            }
                            
                    	});
                        
                        this.on('Assert', async (data) => {
                    		const assoc = await interpretate(data, {hold:true});
                    		const text = await interpretate(assoc.Message, {});
                            if (!shown) {
                                shown = true;
                                parent.classList.remove('hidden');
                            }
                             
                            const  p = document.createElement('p');
                            p.innerText = text;
                            container.appendChild(p);
                        });

                        this.on('Symbol', async (data) => {
                    		const assoc = await interpretate(data, {hold:true});
                    		const text = await interpretate(assoc.Message, {});
                            const name = await interpretate(assoc.Name, {});
                            if (!shown) {
                                shown = true;
                                parent.classList.remove('hidden');
                            }
                             
                            const  p = document.createElement('p');
                            const bold = document.createElement('b');
                            bold.innerText = name + ' ';
                            const plain = document.createTextNode(text);
                            p.appendChild(bold, plain);
                            container.appendChild(p);
                        });                        
                    </WebUIJSBind>                    
                  </main>              
                </div> 
              </div>
            </div>
            </body>
        </html>
    ]
] ];


Wrapper[libUtils_] := With[{},
    {utilsAddListeners, utilsReset, utilsTransition, utilsAddBreak, utilsRemoveBreak} = libUtils;
    App
];

Wrapper